buildscript {
    ext {
        springBootDomaVersion = '1.1.1'
        domaVersion = '2.24.0'
        lombokVersion = '1.18.10'
    }
}


plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'java-library'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'idea'


group = 'com.practise'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_1_8


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Greenwich.SR2")
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("org.seasar.doma.boot:doma-spring-boot-starter:${springBootDomaVersion}")
    implementation('mysql:mysql-connector-java')


    implementation "org.seasar.doma:doma:${domaVersion}"
    annotationProcessor "org.seasar.doma:doma:${domaVersion}"

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("mysql:mysql-connector-java")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    testImplementation("org.springframework.boot:spring-boot-starter-test")

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
    }
}

sourceSets {
    main {
        java {
            srcDir 'src_back/main/java'
        }
        resources {
            srcDir 'src_back/main/resources'
        }
    }
    test {
        java {
            srcDir 'src_back/test/java'
        }
        resources {
            srcDir 'src_back/test/resources'
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        // when use doma, outputDir are should be 'build/classes{main,test}
        outputDir file('build/classes/java/main')
        testOutputDir file('build/classes/java/test')
    }
    project {
        ipr {
            withXml { provider ->
                // Get XML as groovy.util.Node to work with.
                def projectXml = provider.asNode()

                // Find compiler configuration component.
                def compilerConfiguration = projectXml.component.find { component ->
                    component.'@name' == 'CompilerConfiguration'
                }

                // Replace current annotationProcessing
                // that is part of the compiler configuration.
                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
                currentAnnotationProcessing.replaceNode {
                    annotationProcessing {
                        profile(name: 'Default', default: true, enabled: true) {
                            sourceOutputDir(name: ".apt_generated")
                            sourceTestOutputDir(name: ".apt_generated")
                            outputRelativeToContentRoot(value: "true")
                            processorPath(useClasspath: true)
                        }
                    }
                }
            }
        }
    }
}

task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}


bootJar {
    launchScript()
    archiveFileName = archiveFileName = "$archiveAppendix.$archiveAppendix"
}

task generateNuxtJs(type: NpmTask, dependsOn: 'npm_install') {
    args = ['run', 'build']
}

compileJava.dependsOn copyDomaResources
generateNuxtJs.mustRunAfter compileJava
bootJar.dependsOn generateNuxtJs
